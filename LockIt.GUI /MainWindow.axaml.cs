using System;
using System.ComponentModel;
using Avalonia.Controls;
using Avalonia.Interactivity;
using LockIt.GUI.Controllers;

namespace LockIt.GUI;

/// <summary>
/// Classe principal da janela. Responsável por gerenciar a interface do usuário.
/// </summary>
public partial class MainWindow : Window, INotifyPropertyChanged
{
    private string _passwordDisplay;
    private int _passwordLength = 10;
    private bool _includeDigits = true;
    private bool _includeLowercase = true;
    private bool _includeUppercase = false;
    private bool _includeSpecialChars = false;
    
    /// <summary>
    /// CONTROLLER (LIGA GUI AO BACKEND)
    /// </summary>
    private readonly GuiController _controller;

    public string PasswordDisplay
    {
        get => _passwordDisplay;
        set
        {
            if (_passwordDisplay != value)
            {
                _passwordDisplay = value;
                OnPropertyChanged(nameof(PasswordDisplay));
            }
        }
    }

    public int PasswordLength
    {
        get => _passwordLength;
        set
        {
            if (_passwordLength != value)
            {
                _passwordLength = value;
                OnPropertyChanged(nameof(PasswordLength));
            }
        }
    }

    public bool IncludeDigits
    {
        get => _includeDigits;
        set
        {
            if (_includeDigits != value)
            {
                _includeDigits = value;
                OnPropertyChanged(nameof(IncludeDigits));
            }
        }
    }

    public bool IncludeLowercase
    {
        get => _includeLowercase;
        set
        {
            if (_includeLowercase != value)
            {
                _includeLowercase = value;
                OnPropertyChanged(nameof(IncludeLowercase));
            }
        }
    }

    public bool IncludeUppercase
    {
        get => _includeUppercase;
        set
        {
            if (_includeUppercase != value)
            {
                _includeUppercase = value;
                OnPropertyChanged(nameof(IncludeUppercase));
            }
        }
    }

    public bool IncludeSpecialChars
    {
        get => _includeSpecialChars;
        set
        {
            if (_includeSpecialChars != value)
            {
                _includeSpecialChars = value;
                OnPropertyChanged(nameof(IncludeSpecialChars));
            }
        }
    }
    
    /// <summary>
    /// Construtor da janela principal
    /// </summary>
    public MainWindow()
    {
        InitializeComponent();
        DataContext = this;
        
        _controller = new GuiController();
        PasswordDisplay = "Your password will appear here";
    }
    
    /// <summary>
    /// Evento necesssário para o Binding funcionar corretamente.
    /// </summary>
    public event PropertyChangedEventHandler? PropertyChanged;
    private void OnPropertyChanged(string propertyName)
    {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
    
    /// <summary>
    /// Evento do botão Copy
    /// </summary>
    private void OnCopyClicked(object? sender, RoutedEventArgs eventButtonCopy)
    {
        Console.WriteLine("Copy button clicked!");
    }
    /// <summary>
    /// Evento do botão Reload
    /// </summary>
    private void OnReloadClicked(object? sender, RoutedEventArgs eventButtonReload)
    {
        Console.WriteLine("Reload button clicked!");

        string charset = "";
        if (IncludeDigits)
        {
            charset += LockIt.LockItCore.CharacterSets.Digits;
        }

        if (IncludeLowercase)
        {
            charset += LockIt.LockItCore.CharacterSets.LowerCaseLetters;
        }

        if (IncludeUppercase)
        {
            charset += LockIt.LockItCore.CharacterSets.UpperCaseLetters;
        }

        if (IncludeSpecialChars)
        {
            charset += LockIt.LockItCore.CharacterSets.SpecialCharacters;
        }
        
        var password = _controller.GenerateNewPassword(_passwordLength, charset);
        PasswordDisplay = password;
        DataContext = null;
        DataContext = this;
    }
    
    /// <summary>
    /// Evento do botão Save
    /// </summary>
    private void OnSaveClicked(object? sender, RoutedEventArgs eventButtonSave)
    {
        Console.WriteLine("Save button clicked!");
        string service = "exemple21212.com";
        string email = "exemple@exemple22222.com";
        string notes = "Generated by GUI teste2";
        
        _controller.SaveCredential(service, email, PasswordDisplay, notes);
    }
}